pyWeb 3.1: In Python, Yet Another Literate Programming Tool

Literate programming is an attempt to reconcile the opposing needs
of clear presentation to people with the technical issues of 
creating code that will work with our current set of tools.

Presentation to people requires extensive and sophisticated typesetting
techniques.  Further, the "narrative arc" of a presentation may not 
follow the source code as layed out for the compiler.

pyWeb is a literate programming tool based on Knuth's Web to combine the actions
of weaving a document with tangling source files.
It is independent of any particular document markup or source language.
Is uses a simple set of markup tags to define chunks of code and 
documentation.

The ``pyweb.w`` file is the source for the various ``pyweb`` module and script files.
The various source code files are created by applying a
tangle operation to the ``.w`` file.  The final documentation is created by
applying a weave operation to the ``.w`` file.

Installation
-------------

This requires Python 3.10.

First, downnload the distribution kit from PyPI.

::

    python3 setup.py install

This will install the ``pyweb`` module, and the ``weave`` and ``tangle`` applications.

Produce Documentation
---------------------

The supplied documentation uses RST markup; it requires docutils.

::

    python3 -m pip install docutils

::

	python3 -m pyweb pyweb.w
	rst2html.py pyweb.rst pyweb.html

Authoring
---------

The ``pyweb.html`` document describes the markup used to define code chunks
and assemble those code chunks into a coherent document as well as working code.

If you're a JEdit user, the ``jedit`` directory can be used
to configure syntax highlighting that includes **py-web-tool** and RST.

Operation
---------

After installation and authoring, you can then run **py-web-tool** with

::

    python3 -m pyweb pyweb.w 

This will create the various output files from the source .w file.

-   ``pyweb.html`` is the final woven document.

-   ``pyweb.py``, ``tangle.py``, ``weave.py``, ``README``, ``setup.py`` and ``MANIFEST.in`` 
	``.nojekyll`` and ``index.html`` are tangled output files.

Testing
-------

The ``tests`` directory includes ``pyweb_test.w``, which will create a 
complete test suite.

This weaves a ``pyweb_test.html`` file.

This tangles several test modules:  ``test.py``, ``test_tangler.py``, ``test_weaver.py``,
``test_loader.py``, ``test_unit.py``, and ``test_scripts.py``.  
Use **pytest** to run all the tests

::

	python3 bootstrap/pyweb.py -xw pyweb.w 
	python3 pyweb.py tests/pyweb_test.w -o tests
	PYTHONPATH=${PWD} pytest
	rst2html.py tests/pyweb_test.rst tests/pyweb_test.html
    mypy --strict pyweb.py weave.py tangle.py


